From f3539720532ecca017ef39e02610865ce62f7ad6 Mon Sep 17 00:00:00 2001
From: karthick111 <karthickrko61@gmail.com>
Date: Sat, 6 Aug 2016 04:00:33 +0200
Subject: [PATCH 1/1] init: fixup ro.hardware from proc/cpuinfo

---
 init/init.cpp | 21 +++++++++++++++++----
 init/util.cpp | 28 ++++++++++++++++++++++++++++
 init/util.h   |  1 +
 3 files changed, 46 insertions(+), 4 deletions(-)

diff --git a/init/init.cpp b/init/init.cpp
index 58d7d34..921b11a 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -75,6 +75,8 @@ static int property_triggers_enabled = 0;
 #define BOARD_CHARGING_CMDLINE_VALUE "true"
 #endif
 
+static char hardware[32];
+static unsigned revision = 0;
 static char qemu[32];
 static char battchg_pause[32];
 
@@ -806,6 +808,9 @@ static void import_kernel_nv(char *name, bool for_emulator)
 }
 
 static void export_kernel_boot_props() {
+        char tmp[PROP_VALUE_MAX];
+        int ret;
+
     struct {
         const char *src_prop;
         const char *dst_prop;
@@ -817,16 +822,24 @@ static void export_kernel_boot_props() {
         { "ro.boot.mode",       "ro.bootmode",   "unknown", },
         { "ro.boot.baseband",   "ro.baseband",   "unknown", },
         { "ro.boot.bootloader", "ro.bootloader", "unknown", },
-        { "ro.boot.hardware",   "ro.hardware",   "unknown", },
-#ifndef IGNORE_RO_BOOT_REVISION
-        { "ro.boot.revision",   "ro.revision",   "0", },
-#endif
     };
     for (size_t i = 0; i < ARRAY_SIZE(prop_map); i++) {
         char value[PROP_VALUE_MAX];
         int rc = property_get(prop_map[i].src_prop, value);
         property_set(prop_map[i].dst_prop, (rc > 0) ? value : prop_map[i].default_value);
     }
+    get_hardware_name(hardware, &revision);
+    /* if this was given on kernel command line, override what we read
+     * before (e.g. from /proc/cpuinfo), if anything */
+    ret = property_get("ro.boot.hardware", tmp);
+    if (ret)
+       strlcpy(hardware, tmp, sizeof(hardware));
+       property_set("ro.hardware", hardware);
+
+    ret = property_get("ro.boot.revision", tmp);
+    if (!ret)
+       snprintf(tmp, PROP_VALUE_MAX, "%d", revision);
+       property_set("ro.revision", tmp);
 }
 
 static void process_kernel_dt(void)
diff --git a/init/util.cpp b/init/util.cpp
index b006e0b..8deab1c 100644
--- a/init/util.cpp
+++ b/init/util.cpp
@@ -401,6 +401,34 @@ void open_devnull_stdio(void)
     }
 }
 
+void get_hardware_name(char *hardware, unsigned int *revision) {
+    FILE* fp = fopen("/proc/cpuinfo", "re");
+    if (fp == NULL) {
+    return;
+    }
+    char buf[1024];
+    while (fgets(buf, sizeof(buf), fp) != NULL) {
+    if (strncmp(buf, "Hardware", 8) == 0) {
+       const char* hw = strstr(buf, ": ");
+    if (hw) {
+       hw += 2;
+       size_t n = 0;
+       while (*hw) {
+         if (!isspace(*hw)) {
+            hardware[n++] = tolower(*hw);
+           }
+           hw++;
+           if (n == 31) break;
+          }
+         hardware[n] = 0;
+        }
+      } else if (strncmp(buf, "Revision", 8) == 0) {
+        sscanf(buf, "Revision : %ux", revision);
+      }
+    }
+    fclose(fp);
+  }
+
 void import_kernel_cmdline(bool in_qemu, std::function<void(char*,bool)> import_kernel_nv)
 {
     char cmdline[2048];
diff --git a/init/util.h b/init/util.h
index 09d64cd..4b02efb 100644
--- a/init/util.h
+++ b/init/util.h
@@ -58,6 +58,7 @@ void make_link_init(const char *oldpath, const char *newpath);
 void remove_link(const char *oldpath, const char *newpath);
 int wait_for_file(const char *filename, int timeout);
 void open_devnull_stdio(void);
+void get_hardware_name(char *hardware, unsigned int *revision);
 void import_kernel_cmdline(bool in_qemu, std::function<void(char*,bool)>);
 int make_dir(const char *path, mode_t mode);
 int restorecon(const char *pathname);
-- 
2.1.4

